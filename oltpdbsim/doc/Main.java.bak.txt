package main.java.entry;

import java.io.IOException;
import java.util.Random;

import main.java.cluster.Cluster;
import main.java.db.TpccDatabase;
import main.java.metric.Metric;
import main.java.workload.TpccWorkload;
import main.java.workload.WorkloadExecutor;

import org.apache.commons.math3.random.RandomDataGenerator;

public class Main {
	//private static ReadConfig config = null;
	
	public static void main(String[] args) throws IOException {
		Global.rand = new Random();
		Global.rdg = new RandomDataGenerator();		
						
		//Read input arguments from console [Note: In future will use commons-cli]		
		if(args.length == 4) {
			Global.LOGGER.info("Operating System: "+Global.OS);
						
			switch(args[0]) {
				// Workload Generation							
				case "wrl":
					Global.LOGGER.info("-----------------------------------------------------------------------------");
					Global.LOGGER.info("Generating OLTP workloads ...");
					//config = new ReadConfig();					
					
					if(args[1].equals("tpcc") || args[1].equals("twitter")) {
						
						// Read console arguments
						ReadConfig.readArgs(args);
						
						switch(args[1]){
							case "tpcc":
								while(Global.repeated_runs != 0) {
									Global.LOGGER.info("=============================================================================");									
									
									TpccDatabase tpccDatabase = new TpccDatabase("tpcc");
									TpccWorkload tpcc = new TpccWorkload("/tpcc.cnf");
									
									// Read TPCC configurations
									tpcc.readConfig();
									
									// Estimate initial Table sizes
									tpccDatabase.estimateTableSize(tpcc);
									
									// Populate initial Database
									tpccDatabase.populate();
																		
									// Workload generation
									tpcc.generateWorkload(tpccDatabase);
									
									// Serialize Database object and Global parameters
									Serialize.execute(tpccDatabase, tpcc);
									
									Global.global_tupleSeq = 0;
									Global.global_trSeq = 0;
									
									Global.LOGGER.info("Workload generation for repeated run "+Global.repeated_runs+" is completed now.");
									
									// Proceed for the next workload generation run
									--Global.repeated_runs;
								}
								
								break;
								
							case "twitter":							
								break;
								
							default:
								Global.LOGGER.info(Global.wrl_usage);
								Global.LOGGER.info(Global.abort);
								break;
						} //end -- inner switch()					
				} else {
					usage(Global.wrl);
				} // end -- if()
				
				break;
				
				// Simulation Run
				case "run":
					Global.LOGGER.info("Simulating shared-nothing OLTP database cluster.");					
					//config = new ReadConfig();
					
					if(args[1].equals("tpcc") || args[1].equals("twitter")) {
						ReadConfig.readArgs(args);
						
						switch(args[1]){
							case "tpcc":
								// Reading simulation aspects
								ReadConfig.readConfigFile("./sim.cnf");
								
								// Reading global configurations								
								//config.readGlobal("/global.cnf");
								
								while(Global.repeated_runs != 0) {

									Global.LOGGER.info("=============================================================================");
									Global.LOGGER.info("Starting simulation for run "+Global.repeated_runs+" ...");									
									
									// Re-seed the Random Data Generator
									Global.rand.setSeed(Global.repeated_runs);
									Global.rdg.reSeed(Global.repeated_runs);
									
									TpccDatabase tpccDatabase = new TpccDatabase("tpcc");
									TpccWorkload tpcc = new TpccWorkload("/tpcc.cnf");
									
									// Read TPCC configurations
									tpcc.readConfig();
									
									// Estimate initial Table sizes
									tpccDatabase.estimateTableSize(tpcc);
									
									// Populate initial Database
									tpccDatabase.populate();
									
									// Cluster initialisation and Workload execution
									Cluster dbCluster = new Cluster();
									WorkloadExecutor wrlExecutor = new WorkloadExecutor();
									Metric.init();
									
									// Deserialize Database object and Global parameters									
									//tpccDatabase = (TpccDatabase) Deserialize.execute(tpccDatabase, tpcc);
																		
									// Assign Data popularity for Primary tables only
									tpcc.generateDataPopularity(tpccDatabase);
									
									// Warm up									
									tpcc.warmup(tpccDatabase);
									
									// Create a database cluster consisted of a set of physical servers and a consistent hash ring to store the physical data tuples
									dbCluster.setup(tpccDatabase, tpcc);
									
									// Workload execution
									wrlExecutor.execute(tpccDatabase, dbCluster, tpcc);									
									
									// Proceed for the next simulation run
									--Global.repeated_runs;																
								}
								
								break;
							
							case "twitter":
								break;
							
							default:
								Global.LOGGER.info(Global.run_usage);
								Global.LOGGER.info(Global.abort);
								break;	
						} // end -- inner switch()						
					} else {
						usage(Global.run);
					} //end -- if()					
					
					break;
			} // end -- outer switch()
		} else {
			usage(Global.wrl);
			usage(Global.run);
		} // end -- outer if()
	}
	
	private static void usage(String type) {
		switch(type) {
			case "wrl":
				Global.LOGGER.error(Global.wrl_usage);
				break;
			
			case "run":
				Global.LOGGER.error(Global.run_usage);
				break;
		}
			
		Global.LOGGER.error(Global.abort);
		System.exit(0);
	}	
}